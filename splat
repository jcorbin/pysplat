#!/usr/bin/env pypy

from collections import OrderedDict
from optparse import OptionParser

import app
from lru import LRUFileCache

class SplatApp(app.App):
    optparser = OptionParser()
    optparser.add_option('-v', '--verbose',
        dest='verbose', action='store_true', default=True)
    optparser.add_option('-x', '--extract',
        dest='extract', action='append', default=[])

    def __init__(self, args=None):
        self.opts, self.files = self.optparser.parse_args(args)
        self.extractor = self.opts.extract

    def __call__(self):
        if self.opts.verbose:
            counts = OrderedDict()
            paths = []

        with LRUFileCache(self.openkeyfile) as filecache:
            for record in self.records():
                key = self.extractor(record)
                filecache.use(key).write(record)
                if self.opts.verbose:
                    try:
                        counts[key] += 1
                    except KeyError:
                        counts[key] = 1
                        paths.append(filecache[key].name)

        if self.opts.verbose:
            counts = counts.values()
            fmt = '  %% %dd %%s' % len(str(max(counts)))
            for count_path in zip(counts, paths):
                print fmt % count_path

SplatApp()()

# vim:set ft=python ts=4 sw=4 et:
